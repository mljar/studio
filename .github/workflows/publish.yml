name: Publish

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  publish:
    strategy:
      matrix:
        cfg:
        - { platform: linux-64, platform_name: Linux x64,  os: ubuntu-latest, build_platform: linux-64, conda_platform: linux-64 }
        - { platform: osx-64, platform_name: macOS x64, os: macos-latest, build_platform: osx-64, conda_platform: osx-64 }
        #- { platform: osx-arm64, platform_name: macOS arm64, os: macos-latest, build_platform: osx-64, conda_platform: osx-arm64 }
        #- { platform: win-64, platform_name: Windows x64, os: windows-latest, build_platform: win-64, conda_platform: win-64 }

    name: '${{ matrix.cfg.platform_name }} installer'
    runs-on: ${{ matrix.cfg.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: s-weigand/setup-conda@v1
      - run: conda install --file ./workflow_env/conda-${{ matrix.cfg.build_platform }}.lock -y

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: '14.x'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          npm install --global yarn --prefer-offline
          yarn install

      - name: Get package info
        shell: bash
        id: package-info
        run: echo "version=$(python scripts/get_package_version.py)" >> $GITHUB_OUTPUT

      # - name: 'Find Release with tag v${{ steps.package-info.outputs.version}}'
      #   uses: actions/github-script@v7
      #   id: release-exists
      #   env:
      #     APP_VERSION: ${{ steps.package-info.outputs.version}}
      #   with:
      #     script: |
      #       const releases = await github.rest.repos.listReleases({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo
      #       })
      #       const tagName = `v${process.env.APP_VERSION}`
      #       const releaseWithTag = releases.data.find(release => release.tag_name === tagName && (release.draft || release.prerelease))
      #       return releaseWithTag ? 'true' : 'false'
      #     result-encoding: string

      - name: Create Application Server Installer
        run: |
          yarn create_env_installer:${{ matrix.cfg.platform }}

      - name: Update sign list
        if: matrix.cfg.platform == 'osx-64' || matrix.cfg.platform == 'osx-arm64' 
        run: |
          yarn update_binary_sign_list:${{ matrix.cfg.platform }}

      # contents of tarball needs to be signed for notarization
      - name: Codesign Application Server
        if: matrix.cfg.platform == 'osx-64' || matrix.cfg.platform == 'osx-arm64' 
        env: 
          CSC_IDENTITY_AUTO_DISCOVERY: true
          CSC_FOR_PULL_REQUEST: true
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          ENV_INSTALLER_KEYCHAIN_PASS: ${{ secrets.ENV_INSTALLER_KEYCHAIN_PASS }}
          TEAMID: ${{ secrets.TEAMID }}
        run: |
          echo "Extracting env installer"
          yarn extract_env_installer:${{ matrix.cfg.platform }}
          echo $CSC_LINK | base64 -d -o certificate.p12
          security create-keychain -p $ENV_INSTALLER_KEYCHAIN_PASS build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $ENV_INSTALLER_KEYCHAIN_PASS build.keychain
          security import certificate.p12 -k build.keychain -P $CSC_KEY_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $ENV_INSTALLER_KEYCHAIN_PASS build.keychain
          echo "Signing env binaries"
          while read line; do /usr/bin/codesign --force --options=runtime --deep -s "Developer ID Application" ./env_installer/jlab_server_extracted/"$line" -v; done < ./env_installer/sign-${{ matrix.cfg.platform }}.txt
          rm certificate.p12
          security delete-keychain build.keychain

      # recreate tarball after signing contents
      - name: Re-archive Application Server Installer
        if: matrix.cfg.platform == 'osx-64' || matrix.cfg.platform == 'osx-arm64' 
        run: |
          yarn compress_env_installer:${{ matrix.cfg.platform }}
          rm -rf ./env_installer/jlab_server_extracted

      # - name: Create Application Installer for Test
      #   env:
      #     CSC_IDENTITY_AUTO_DISCOVERY: false # disable code signing if not release asset
      #   run: |
      #     yarn dist:${{ matrix.cfg.platform }}
      #   if: steps.release-exists.outputs.result == 'false'

      - name: Create Application Installer for Release
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: true
          CSC_FOR_PULL_REQUEST: true
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          TEAMID: ${{ secrets.TEAMID }}
        run: yarn dist:${{ matrix.cfg.platform }}
      
      - name: Upload Debian x64 Installer
        if: matrix.cfg.platform == 'linux-64'
        uses: actions/upload-artifact@v4
        with:
          name: debian-installer-x64
          path: |
            dist/mljar-studio.deb

      - name: Upload Fedora x64 Installer
        if: matrix.cfg.platform == 'linux-64'
        uses: actions/upload-artifact@v4
        with:
          name: fedora-installer-x64
          path: |
            dist/mljar-studio.rpm
      
      - name: Upload Snap Installer
        if: matrix.cfg.platform == 'linux-64'
        uses: actions/upload-artifact@v4
        id: snap-artifact
        with:
          name: snap-installer
          path: |
            dist/mljar-studio.snap

      - name: Upload macOS x64 Installer
        if: matrix.cfg.platform == 'osx-64'
        uses: actions/upload-artifact@v4
        with:
          name: mac-installer-x64
          path: |
            dist/mljar-studio-x64.dmg

      - name: Upload macOS arm64 Installer
        if: matrix.cfg.platform == 'osx-arm64'
        uses: actions/upload-artifact@v4
        with:
          name: mac-installer-arm64
          path: |
            dist/mljar-studio-arm64.dmg

      - name: Upload Windows x64 Installer
        if: matrix.cfg.platform == 'win-64'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-x64
          path: |
            dist/mljar-studio-Setup.exe
